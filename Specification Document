I am using Python and I am proficient in it. I can also use SQL and R but out of the two,I am more proficient in SQL.
My study program is Bachelor of Science(Bsc)
Algorithms I will use:
Markov Chain (Order-1 or Order-2):
The Markov chain will store transition probabilities such as P(next_move | previous_move).
Trie:
(as suggested by my supervisor).
Randomization:
To introduce controlled randomness in the AI’s decisions to avoid predictability.
Or reinforced learning algorithms,as ive mentioned,I am not sure which path to go down yet.
Data Structures:
Lists, dictionaries (for probability tables), and a trie-like structure for move history.
Problem I am solving:The problem is to create an AI that can learn and adapt to a human player’s strategy in the game of Rock–Paper–Scissors.
Inputs:Instead of playing randomly, the AI will analyze the player’s previous moves and attempt to predict the next move to increase its chances of winning.
The program receives user input each round: “r”, “p”, or “s” (for rock, paper, or scissors).The program stores this move in a history list.The AI then uses this history to update its Markov Chain transition probabilities or reinforced learning and make a prediction of the player’s next move.Based on the prediction, the computer selects the counter-move.

I would say Markov Chains use O(1) because it uses direct dictionary lookups.Its space complexity is proportional to the number of possible state transitions.The overall gameplay loop will be O(n)
In reinforced learning,it will be O(1),while space complexity will be O(n^2) where n is the number of move states tracked
SOURCES:https://en.wikipedia.org/wiki/Markov_chain
https://www.tutorialspoint.com/design_and_analysis_of_algorithms/design_and_analysis_of_algorithms_time_complexity.htm
https://www.geeksforgeeks.org/machine-learning/markov-chain/
https://www.datacamp.com/tutorial/reinforcement-learning-python-introduction

CORE OF THE PROJECT:
The core of my project is the AI component which is how the computer learns and adapts to the player’s choices using a Markov Chain model or reinforced learning,depending on what I choose.
While the game interface (taking input, displaying results) is part of the project, most of my time will be spent developing and testing the AI’s decision-making logic.I would also love to add an element where the AI also picks a random move at crunch situations maybe in a series of 3,if the game is tied at 1-1,a human will vary their move,and I would like the AI to counter that by playing its own random move.
